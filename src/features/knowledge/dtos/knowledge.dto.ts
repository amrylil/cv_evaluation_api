import { z } from "../../../config/zod-openapi";
import { v4 as uuidv4 } from "uuid";

/**
 * Schema for knowledge representation
 */
export const knowledgeCoreSchema = z.object({
  id: z.string().uuid().openapi({ example: uuidv4() }),
  text: z.string().min(1, "Text is required").openapi({
    example: "Scoring rubric for CV: Skills, Experience, Achievements...",
  }),
  vector: z.array(z.number()).openapi({
    description: "Embedding vector generated by the server.",
    example: [0.1, 0.2, 0.3 /* ... */, , 0.9],
  }),
  tags: z
    .array(z.string())
    .optional()
    .openapi({
      description: "Tags for filtering, e.g., ['rubric', 'cv']",
      example: ["rubric", "cv"],
    }),
});

/**
 * Schema for create knowledge request
 */
export const createKnowledgeSchema = knowledgeCoreSchema.omit({ id: true });

/**
 * Schema for update knowledge request (all fields optional)
 */
export const updateKnowledgeSchema = createKnowledgeSchema.partial();

/**
 * Validator for middleware
 */
export const createKnowledgeValidator = createKnowledgeSchema;
export const updateKnowledgeValidator = updateKnowledgeSchema;

/**
 * Validator for getAllKnowledges query
 */
export const getAllKnowledgesQuerySchema = z.object({
  page: z
    .string()
    .regex(/^\d+$/, "Page must be a number")
    .optional()
    .default("1"),
  limit: z
    .string()
    .regex(/^\d+$/, "Limit must be a number")
    .optional()
    .default("10"),
  tag: z.string().optional().openapi({
    description: "Filter knowledge by a specific tag",
    example: "rubric",
  }),
});

/**
 * TypeScript types
 */
export type KnowledgeCoreDto = z.infer<typeof knowledgeCoreSchema>;
export type CreateKnowledgeDto = z.infer<typeof createKnowledgeSchema>;
export type UpdateKnowledgeDto = z.infer<typeof updateKnowledgeSchema>;
